local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
if not vim.loop.fs_stat(lazypath) then
  vim.fn.system({
    "git",
    "clone",
    "--filter=blob:none",
    "https://github.com/folke/lazy.nvim.git",
    "--branch=stable", -- latest stable release
    lazypath,
  })
end
vim.opt.rtp:prepend(lazypath)

local plugins = {
  'srcery-colors/srcery-vim',
  {
    'nvim-lualine/lualine.nvim',
    dependencies = { 'nvim-tree/nvim-web-devicons' }
  },
  'scrooloose/nerdtree',
  'dense-analysis/ale',
  {
    "lervag/vimtex",
    init = function()
      vim.g.vimtex_view_method = 'zathura'

      vim.g.vimtex_compiler_method = 'tectonic'
    end
  },
  {
    "karb94/neoscroll.nvim",
    config = function ()
      require('neoscroll').setup {}
    end
  }
}

require('lazy').setup(plugins, opts)
require('lualine').setup {
  options = {
    theme = 'srcery',
    icons_enabled = false,
    component_separators = '|',
    section_separators = { left = '', right = '' },
  },
  sections = {
    lualine_a = {
      { 'mode', separator = { left = '' }, right_padding = 2 },
    },
    lualine_b = { 'filename', 'branch' },
    lualine_c = { 'fileformat' },
    lualine_x = {},
    lualine_y = { 'filetype', 'progress' },
    lualine_z = {
      { 'location', separator = { right = '' }, left_padding = 2 },
    },
  },
  inactive_sections = {
    lualine_a = { 'filename' },
    lualine_b = {},
    lualine_c = {},
    lualine_x = {},
    lualine_y = {},
    lualine_z = { 'location' },
  },
  tabline = {},
  extensions = {},
}

if vim.fn.has('termguicolors') == 1 then
  vim.opt.termguicolors = true
end

vim.opt.background = 'dark'
vim.cmd.colorscheme('srcery')

vim.opt.number = true
vim.opt.linebreak = true
vim.opt.showbreak="++"
vim.opt.textwidth=80
vim.opt.showmatch=true
vim.opt.visualbell=true
vim.opt.hlsearch=true
vim.opt.smartcase=true
vim.opt.ignorecase=true
vim.opt.incsearch=true
vim.opt.autoindent=true
vim.opt.expandtab=true

vim.opt.shiftwidth=2      -- Number of auto-indent spaces
vim.opt.smartindent=true  -- Enable smart-indent
vim.opt.smarttab=true     -- Enable smart-tabs
vim.opt.tabstop=2         -- Number of spaces per Tab
vim.opt.softtabstop=2     -- Number of spaces per Tab

vim.opt.ruler=true        -- Show row and column ruler information

vim.opt.undolevels=1000   -- Number of undo levels
vim.opt.backspace={'indent','eol','start'}  -- Backspace behaviour

vim.opt.mouse='a'         -- allow mouse for pasting etc

vim.opt.so=7              -- Keep 7 lines visible at the top and bottom of the screen when scrolling

-- use n and N to center the next search result on the screen
vim.keymap.set("n", "n", "nzz")
vim.keymap.set("n", "N", "Nzz")

-- Escape from terminal
vim.keymap.set('t', '<Esc>', [[<C-\><C-n>]])

-- show whitespace
vim.opt.list = true
vim.opt.listchars = { tab = '▸ ', trail = '·' }

vim.opt.showmode = false

vim.cmd.filetype('on')
vim.cmd.syntax('on')

-- Set background to be clear
vim.cmd([[autocmd vimenter * hi Normal guibg=NONE ctermbg=NONE]])

